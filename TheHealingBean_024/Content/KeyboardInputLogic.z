//Author: Evan Tay
//Date: 26/5/14
//Title: Keyboard Input Logic
//Description: This script keeps track of keyboard input only.
class KeyboardInputLogic : ZilchComponent
{
    var InputX : Integer = 0; //-1 maps to LEFT, 0 to NO MOVEMENT and 1 to RIGHT
    var InputY : Integer = 0; //-1 maps to DOWN, 0 to NO MOVEMENT and 1 to UP
    var InputJump : Boolean = false;
    var InputInteract : Boolean = false; //T represents interact input, F represents no interact input
    //Used to interact with objects such as picking up of objects
    var IsInputInteractUp : Boolean = false; //Is the InputInteract key up? Make sure player releases it and
    //presses it again before triggering new input
    var InputRotateInteract : Integer = 0; //-1 maps to LEFT, 0 to no ROTATION, 1 to RIGHT
    var InputInventoryInteract : Integer = 0; //Indicating desired inventory slot (0-4)
    var IsInputDialogUp : Boolean = true;
    var InputDialog : Boolean = false; //For dialog interaction
    
    constructor() : base()
    {
    }

    function Initialize(init : CogInitializer)
    {
        Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    }
    
    function CheckInputLeft() : Boolean
    {
        return Zero.Keyboard.KeyIsDown(Keys.Left);
    }
    
    function CheckInputRight() : Boolean
    {
        return Zero.Keyboard.KeyIsDown(Keys.Right);
    }
    
    function CheckInputUp() : Boolean
    {
        return Zero.Keyboard.KeyIsDown(Keys.Space) || Zero.Keyboard.KeyIsDown(Keys.Up);
    }
    
    function CheckInputDown() : Boolean
    {
        return Zero.Keyboard.KeyIsDown(Keys.Down);
    }
    
    function CheckInputJump(): Boolean
    {
        return Zero.Keyboard.KeyIsDown(Keys.Space);
    }
    
    function UpdateInputInteract() : Boolean
    {
        var keyDown : Boolean = Zero.Keyboard.KeyIsDown(Keys.W);

        //If key is not down already and key is down
        if(this.IsInputInteractUp && keyDown)
        {
            this.IsInputInteractUp = false;
            return true;
        }
        else if(!keyDown)
        { //Else if key is not down
            this.IsInputInteractUp = true;
        }

        return false;
    }
    
    function CheckInputRotateInteractLeft() : Boolean
    {
        return Zero.Keyboard.KeyIsDown(Keys.A);
    }
    
    function CheckInputRotateInteractRight() : Boolean
    {
        return Zero.Keyboard.KeyIsDown(Keys.D);
    }
    
    function UpdateInputInventoryInteract()
    {
        if(Zero.Keyboard.KeyIsDown(Keys.One))
        {
            this.InputInventoryInteract = 0;
        }
        else if(Zero.Keyboard.KeyIsDown(Keys.Two))
        {
            this.InputInventoryInteract = 1;
        }
        else if(Zero.Keyboard.KeyIsDown(Keys.Three))
        {
            this.InputInventoryInteract = 2;
        }
        else if(Zero.Keyboard.KeyIsDown(Keys.Four))
        {
            this.InputInventoryInteract = 3;
        }
        else
        {
            this.InputInventoryInteract = -1;
        }
    }
    
    function CheckInputDialog() : Boolean
    {
        var keyDown : Boolean = Zero.Keyboard.KeyIsDown(Keys.E);

        //If key is not down already and key is down
        if(this.IsInputDialogUp && keyDown)
        {
            this.IsInputDialogUp = false;
            return true;
        }
        else if(!keyDown)
        { //Else if key is not down
            this.IsInputDialogUp = true;
        }

        return false;
    }
    
    function OnLogicUpdate(updateEvent : UpdateEvent)
    {
        //InputX
        if(this.CheckInputLeft() && this.CheckInputRight() == false)
        {
            //Input mapping to LEFT
            this.InputX = -1;
        }
        else if(this.CheckInputRight() && this.CheckInputLeft() == false)
        {
            //Input mapping to RIGHT
            this.InputX = 1;
        }
        else
        {
            //Input mapping to NULL
            this.InputX = 0;
        }
        
        //InputY
        if(this.CheckInputUp() && this.CheckInputDown() == false)
        {
            //Input mapping to UP
            this.InputY = 1;
        }
        else if(this.CheckInputDown() && this.CheckInputUp() == false)
        {
            //Input mapping to DOWN
            this.InputY = -1;
        }
        else
        {
            //Input mapping to NULL
            this.InputY = 0;
        }
        
        //InputJump
        this.InputJump = this.CheckInputJump();
        
        //InputInteract
        this.InputInteract = this.UpdateInputInteract();
           
        if(this.CheckInputRotateInteractLeft())
        {
            this.InputRotateInteract = -1;
        }
        else if(this.CheckInputRotateInteractRight())
        {
            this.InputRotateInteract = 1;
        }
        else
        {
            this.InputRotateInteract = 0;
        }
        
        this.UpdateInputInventoryInteract();
        
        this.InputDialog = this.CheckInputDialog();
    }
}
