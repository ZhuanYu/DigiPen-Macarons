class CharacterClass : ZilchComponent
{
    // Movement speed
    var Speed : Real = 0;
    // How fast the Character accelerates
    var Acceleration : Real = 0;
    // Amount that pulls the Character down
    var Gravity : Real = 0;
    // How high the Character can jump
    var JumpHeight : Real = 0;
    
    var CurrentSpeed : Real = 0;
    var TargetSpeed : Real = 0;
    var AmountToMove : Real2 = local Real2(0,0);
    
    // The object currently being interacted with
    var ObjectHit : Cog = null;
    
    //
    var Character : Cog = null;
    
    // If the enemy is dying
    var Dying : Boolean = false;
    
    // PlayerPhysics
    var Size : Real3 = local Real3 (0,0,0);
    var Centre : Real3 = local Real3 (0,0,0);
    
    var Grounded : Boolean = false;
    var MoveStop : Boolean = false;
    var HitTop : Boolean = false;
    
    var RayBeam : Ray = Ray();
    var Skin : Real = 0.005;
    
    var EndPosition : Real3 = local Real3 (0,0,0);
    var HeadSize : Real = 0.25;
    var DrawColor : Real4 = local Real4 (1,0,0,1);
    var OnTop : Boolean = true;
    var CornerCounter : Integer = 0;
    
    constructor(character: Cog, size: Real3, centre: Real3, speed: Real, 
    acceleration: Real, gravity: Real, jumpheight: Real) : base()
    {
        this.Character = character;
        this.Size = size;
        this.Centre = centre;
        this.Speed = speed;
        this.Acceleration = acceleration;
        this.Gravity = gravity;
        this.JumpHeight = jumpheight;
    }
    
    destructor()
    {
    }
    
    function Move(gamespace: Space, moveAmount: Real2)
    {
        var deltaX = moveAmount.X;
        var deltaY = moveAmount.Y;
        
        this.Grounded = false;
        
        // I draw out tree rays from the character
        // One on the left, one in the mid, one in on the right
        this.CornerCounter = 0;
        
        for (var i = 0; i < 3; ++i)
        {
            var dir = 0;
            if (deltaY > 0)
            {
                dir = 1;
                this.HitTop = true;
            }
            else
            {
                dir = -1;
                this.HitTop = false;
            }
            
            var x = (this.Character.Transform.Translation.X + this.Centre.X - this.Size.X * 0.5) + this.Size.X * 0.5 * i;
            var y = this.Character.Transform.Translation.Y + this.Centre.Y + this.Size.Y * 0.5 * dir;
            
            this.RayBeam.Start = local Real3 (x,y,0);
            this.RayBeam.Direction = local Real3 (0,dir,0);
            
            var castResultRange = gamespace.PhysicsSpace.CastRayResults(this.RayBeam, 1);
            
            //Iterate through all results
            foreach(var castResult in castResultRange)
            {
                //Get how far away the object was that we hit
                var dist = castResult.Distance;
                
                this.EndPosition = this.RayBeam.Start + this.RayBeam.Direction;
                
                //var debugLine = new DebugLine();
                //debugLine.Start(this.RayBeam.Start).End(this.EndPosition).HeadSize(this.HeadSize).Float4Color(this.DrawColor).OnTop(this.OnTop);
                //debugLine.Draw();
                
                if (dist <= 1.0)
                {
                    if (castResult.ObjectHit.ArchetypeName == "DefaultTile")
                    {
                        this.CornerCounter += 1;
                        
                        if(dist > Math.Abs(deltaY) + this.Skin)
                        {
                            break;
                        }
                        
                        // If it is not touching the ground yet but ray cast hits
                        if (dist > this.Skin)
                        {         
                            deltaY = dist * dir - this.Skin * dir;
                        }
                        // touching the ground
                        else
                        {
                            deltaY = 0;
                        }
                        
                        this.Grounded = true;
                        break;
                    }
                }
            }

        }
         
        this.MoveStop = false;
        
        // I draw out tree rays from the character
        // One on the left, one in the mid, one in on the right
        for (var i = 0; i < 3; ++i)
        {
            var dir = 0;
            if (deltaX > 0)
            {
                dir = 1;
            }
            else
            {
                dir = -1;
            }
            
            var x = this.Character.Transform.Translation.X + this.Centre.X + this.Size.X * 0.5 * dir;
            var y = (this.Character.Transform.Translation.Y + this.Centre.Y - this.Size.Y * 0.5) + this.Size.Y * 0.5 * i;
            
            this.RayBeam.Start = local Real3 (x,y,0);
            this.RayBeam.Direction = local Real3 (dir,0,0);
            
            var castResultRange = gamespace.PhysicsSpace.CastRayResults(this.RayBeam, 1);
            
            //Iterate through all results
            foreach(var castResult in castResultRange)
            {
                //Get how far away the object was that we hit
                var dist = castResult.Distance;
                
                this.EndPosition = this.RayBeam.Start + this.RayBeam.Direction;
                
                //var debugLine = new DebugLine();
                //debugLine.Start(this.RayBeam.Start).End(this.EndPosition).HeadSize(this.HeadSize).Float4Color(this.DrawColor).OnTop(this.OnTop);
                //debugLine.Draw();
                
                if (dist <= 1)
                {
                    if (castResult.ObjectHit.ArchetypeName == "DefaultTile")
                    {
                        if(dist > Math.Abs(deltaX) + this.Skin)
                        {
                            break;
                        }
                        
                        // If it is not touching the ground yet but ray cast hits
                        if (dist > this.Skin)
                        {
                            deltaX = dist * dir - this.Skin * dir;
                        }
                        // touching the ground
                        else
                        {
                            deltaX = 0;
                        }
                        
                        this.MoveStop = true;
                        break;
                    }
                }     
            }
        }
        

        
        // Corner check
        if (!this.Grounded && !this.MoveStop)
        {
            var playerDir = local Real3(deltaX, deltaY, 0);
            
            var dirX = 0;
            if (deltaX > 0)
            {
                dirX = 1;
            }
            else
            {
                dirX = -1;
            }
            
            var dirY = 0;
            if (deltaY > 0)
            {
                dirY = 1;
            }
            else
            {
                dirY = -1;
            }
            
            var origin = local Real3(this.Character.Transform.Translation.X + this.Centre.X + this.Size.X * 0.5 * dirX,
                                    this.Character.Transform.Translation.Y + this.Centre.Y + this.Size.Y * 0.5 * dirY,
                                    0);
                                    
            this.RayBeam.Start = origin;
            this.RayBeam.Direction = Math.Normalize(playerDir);
            
            var castResultRange = gamespace.PhysicsSpace.CastRayResults(this.RayBeam, 1);
            
            //Iterate through all results
            foreach(var castResult in castResultRange)
            {
                //Get how far away the object was that we hit
                var dist = castResult.Distance;
                
                this.EndPosition = this.RayBeam.Start + this.RayBeam.Direction;
                
                //var debugLine = new DebugLine();
                //debugLine.Start(this.RayBeam.Start).End(this.EndPosition).HeadSize(this.HeadSize).Float4Color(this.DrawColor).OnTop(this.OnTop);
                //debugLine.Draw();
                
                if (dist <= Math.Sqrt(deltaX * deltaX + deltaY * deltaY))
                {
                    if (castResult.ObjectHit.ArchetypeName == "DefaultTile")
                    {
                        
                        this.Grounded = true;
                        deltaY = 0;
                        break;
                    }
                }     
            }
        }
        
        // Set the character translation
        var finalTransform = local Real3(deltaX, deltaY, 0);
        this.Character.Transform.Translation += finalTransform;
    }
    
    function IncrementTowards(current : Real, target : Real, acc : Real, dt : Real) : Real
    {
        if (current == target)
        {
            return current;
        }
        else
        {
            var dir = target - current;
            
            if (dir >= 0)
            {
                dir = 1;
            }
            else
            {
                dir = -1;
            }
            
            current += acc * dt * dir;
            
            var dir2 = target - current;
            
            if (dir2 >= 0)
            {
                dir2 = 1;
            }
            else
            {
                dir2 = -1;
            }
            
            if (dir == dir2)
            {
                return current;
            }
            else
            {
                return target;
            }
        }
    }
}